<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>test_playersword</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables

hsp_carry=0;
global.grav=0.2;
hsp=4;
vsp=4;
movespeed=4;
jumpspeed=7
global.fire=0;
global.player=self
facing=true
global.attackspeed=43
global.points=100
global.weapon=obj_sword
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Shortcuts for keypresse
MOVELEFT = -keyboard_check(ord('A'));
MOVERIGHT = keyboard_check(ord('D'));
JUMP = keyboard_check(ord('W'));
FIRE = keyboard_check(vk_space);
if(global.weapon!=obj_bow &amp;&amp; sprite_index!=global.weapon)
{
     if image_index &gt; image_number - 1
     {
        sprite_index=test_playersword
     }
}
if(global.fire&gt;global.attackspeed)
    global.fire=0
move=MOVELEFT+MOVERIGHT;
hsp=move*movespeed;

//Move Player
if(move&lt;0)
{  
    image_xscale=-1;
}
 
if(move&gt;0)
{ 
    image_xscale=1;
}

if (place_meeting(x,y+1,obj_wall)) 
    vsp=JUMP*-jumpspeed; 

if(vsp&lt;10) vsp+=global.grav;

var hsp_final=hsp+hsp_carry
hsp_carry=0;
if(place_meeting(x+hsp_final,y,obj_wall))
{
    while(!place_meeting(x+sign(hsp_final),y,obj_wall))
    {
        x+=sign(hsp_final)
    }
    hsp_final=0;
}
if(place_meeting(x,y+vsp,obj_wall))
{
    while(!place_meeting(x,y+sign(vsp),obj_wall))
    {
        y+=sign(vsp)
    }
    vsp=0;
}
x+=hsp_final;
y+=vsp;
if(FIRE &amp;&amp; global.fire==0)
{
    global.fire=1
    show_debug_message("FIRE")
    if(global.weapon==obj_bow)
    {
        arrow=instance_create(x+15,y+15,obj_arrow)
        if(facing==true)
        {
            arrow.direction=image_angle
            arrow.image_angle=image_angle
            arrow.speed=20
            xscale=1
        }
        else
        {
            arrow.direction=180
            arrow.xscale=-1
            arrow.speed=20
            arrow.image_angle=180
            
        }
    }
    if(global.weapon==obj_sword)
    {
         sprite_index=spr_swordattack
         image_speed=1/8
         with instance_create(x,y,obj_swordhit)
            image_xscale=obj_player.image_xscale
         
    }
}
if(global.fire!=0)
    global.fire++
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
